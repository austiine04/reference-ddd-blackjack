package org.home.blackjack.domain.table;

import java.util.List;

import org.home.blackjack.domain.common.DomainException;
import org.home.blackjack.domain.game.Game;
import org.home.blackjack.domain.game.GameFactory;
import org.home.blackjack.domain.game.core.GameID;
import org.home.blackjack.domain.shared.PlayerID;
import org.home.blackjack.domain.table.core.TableID;
import org.home.blackjack.domain.table.event.PlayerIsSeatedEvent;
import org.home.blackjack.domain.table.event.TableEvent;
import org.home.blackjack.domain.table.event.TableIsFullEvent;
import org.home.blackjack.domain.table.event.TableSeatingChangedEvent;
import org.home.blackjack.util.ddd.pattern.AggregateRoot;
import org.home.blackjack.util.ddd.pattern.EventPublisher;

import com.google.common.collect.Lists;

public class Table extends AggregateRoot<TableID> {

	// currently we only use tables of size 2
	private final int size = 2;
	private final List<PlayerID> players = Lists.newArrayList();
	private final transient GameFactory gameFactory;
	private GameID currentGame;

	public Table(TableID id, EventPublisher eventPublisher, GameFactory gameFactory) {
		super(id, eventPublisher);
		this.gameFactory = gameFactory;
	}

	public void playerLeaves(PlayerID player) {
	    players.remove(player);
	    publish(new TableSeatingChangedEvent(getID(), players));
	}
	
	
	public boolean playerSits(PlayerID player) {
		if (players.contains(player)) {
			throw new DomainException(player + " already sits by this table");
		} else if (isFull()) {
			return false;
		} else {
			players.add(player);
			publish(new PlayerIsSeatedEvent(getID(), player));
			publish(new TableSeatingChangedEvent(getID(), players));
			if (isFull()) {
				//what if the id is generated by the repo? then we don't have it here
				Game newGame = gameFactory.createNewGame(players.get(0), players.get(1));
				currentGame = newGame.getID();
				publish(new TableIsFullEvent(getID(), newGame));
			}
			return true;
		}
	}

	public void clearTable() {
		players.clear();
		publish(new TableSeatingChangedEvent(getID(), players));
	}

	private void publish(TableEvent event) {
		eventPublisher().publish(event);
	}

	public boolean isFull() {
		return players.size() == size;
	}
	
	public List<PlayerID> getPlayers() {
		return Lists.newArrayList(players) ;
	}
	
}
